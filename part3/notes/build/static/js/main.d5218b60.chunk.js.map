{"version":3,"sources":["components/Note.js","components/LoginForm.js","components/NoteForm.js","services/notes.js","components/Notification.js","services/login.js","components/Togglable.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","onSubmit","id","type","value","name","onChange","NoteForm","createNote","useState","newNote","setNewNote","event","preventDefault","Math","random","target","token","axios","get","then","response","data","newObject","config","headers","Authorization","post","put","newToken","Notification","message","login","credentials","a","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","show","children","hide","displayName","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","useEffect","noteService","loggedUserJSON","window","localStorage","getItem","JSON","parse","handleLogin","loginService","setItem","stringify","setTimeout","noteFormRef","useRef","addNote","noteObject","concat","current","notesToShow","filter","removeItem","map","key","find","changedNote","returnedNote","catch","error","console","log","n","toggleImportanceId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5218b60.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst LoginForm = ({\n  handleSubmit,\n  handleUsernameChange,\n  handlePasswordChange,\n  username,\n  password\n}) => {\n  return (\n    <div>\n      <h2>Login</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          username\n          <input\n            id='username'\n            type=\"text\"\n            value={username}\n            name=\"Username\"\n            onChange={handleUsernameChange}\n          />\n        </div>\n        <div>\n          password\n          <input\n            id='password'\n            type=\"password\"\n            value={password}\n            name=\"Password\"\n            onChange={handlePasswordChange}\n          />\n        </div>\n        <button id='login-button' type=\"submit\">login</button>\n      </form>\n    </div>\n  )\n}\n\nLoginForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  handleUsernameChange: PropTypes.func.isRequired,\n  handlePasswordChange: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired\n}\n\nexport default LoginForm","import React, { useState } from 'react'\n\nconst NoteForm = ({ createNote }) => {\n  const [newNote, setNewNote] = useState('')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    createNote({\n      content: newNote,\n      important: Math.random() < 0.5,\n    })\n    setNewNote('')\n  }\n\n  return (\n    <div className=\"formDiv\">\n      <h2>Create a new note</h2>\n      <form onSubmit={addNote}>\n        <input\n          id='note-form'\n          type=\"text\"\n          value={newNote}\n          onChange={({ target }) => setNewNote(target.value)}\n        />\n        <button id='note-submit' type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NoteForm","import axios from 'axios'\n\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const request = axios.post(baseUrl, newObject, config)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\n\nexport default { getAll, create, update, setToken }\n\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = 'api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","import React, { useImperativeHandle, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return { toggleVisibility }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.show}</button>\n      </div>\n      <div style={showWhenVisible} className=\"togglableContent\">\n        {props.children}\n        <button onClick={toggleVisibility}>{props.hide}</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.propTypes = {\n  show: PropTypes.string.isRequired,\n  hide: PropTypes.string.isRequired\n}\n\nTogglable.displayName = 'Togglable'\n\nexport default Togglable","import React, { useState, useEffect, useRef } from 'react'\nimport Note from './components/Note'\nimport LoginForm from './components/LoginForm'\nimport NoteForm from './components/NoteForm'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport loginService from './services/login'\nimport Togglable from './components/Togglable'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    noteService.getAll().then((notes) => {\n      setNotes(notes)\n    })\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const handleLogout = () => {\n    setUser(null)\n    noteService.setToken(null)\n    window.localStorage.removeItem('loggedNoteappUser')\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n\n    try {\n      const user = await loginService.login({\n        username, password\n      })\n\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('Wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      )\n    }\n  }\n\n  const noteFormRef = useRef()\n\n  const addNote = (noteObject) => {\n    noteService.create(noteObject).then((note) => {\n      setNotes(notes.concat(note))\n      noteFormRef.current.toggleVisibility()\n    })\n  }\n\n  const toggleImportanceId = (id) => {\n    const note = notes.find((note) => note.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote).then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)))\n      }).catch(error => {\n        console.log(error.message)\n        setErrorMessage(\n          `Note ${note.content} was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important)\n\n  const noteForm = () => {\n    return (\n      <Togglable show=\"create\" hide=\"cancel\" ref={noteFormRef}>\n        <NoteForm createNote={addNote}/>\n      </Togglable>\n    )\n  }\n\n  const loginForm = () => {\n    return (\n      <Togglable show=\"log in\" hide=\"cancel\">\n        <LoginForm\n          username={username}\n          password={password}\n          handleUsernameChange={({ target }) => setUsername(target.value)}\n          handlePasswordChange={({ target }) => setPassword(target.value)}\n          handleSubmit={handleLogin}\n        />\n      </Togglable>\n    )\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n\n      {user === null\n        ? loginForm()\n        : (\n          <div>\n            {user.name} logged-in\n            <button onClick={() => handleLogout()}>logout</button>\n            {noteForm()}\n          </div>\n        )\n      }\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceId(note.id)}\n          />\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}
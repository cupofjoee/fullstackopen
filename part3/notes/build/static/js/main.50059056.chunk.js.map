{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","errorMessage","setErrorMessage","useEffect","noteService","notesToShow","filter","map","key","find","changedNote","returnedNote","catch","error","setTimeout","n","toggleImportanceId","onSubmit","event","preventDefault","noteObject","length","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCY3B,EAhBA,WAEX,OADgBK,IAAMC,IAHV,cAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc9B,EAXE,SAAAC,GAEb,OADgBL,IAAMM,KARV,aAQwBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS9B,EANE,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbJ,aAaI,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCF9BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAe,MAAXA,EACO,KAIP,yBAAKb,UAAU,SACVa,ICsEEC,EA1EH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,aAIwBL,mBAAS,OAJjC,mBAITM,EAJS,KAIKC,EAJL,KAYhBC,qBANa,WACXC,IAAqBnB,MAAK,SAACW,GACzBC,EAASD,QAIG,IAEhB,IAqCMS,EAAcL,EAAUJ,EAAQA,EAAMU,QAAO,SAAC9B,GAAD,OAAUA,EAAKG,aAElE,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcc,QAASQ,IACvB,4BACGI,EAAYE,KAAI,SAAC/B,GAAD,OACf,kBAAC,EAAD,CACEgC,IAAKhC,EAAKc,GACVd,KAAMA,EACNC,iBAAkB,kBA7BD,SAACa,GAC1B,IAAMd,EAAOoB,EAAMa,MAAK,SAACjC,GAAD,OAAUA,EAAKc,IAAMA,KACvCoB,EAAW,2BAAQlC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDyB,EACUd,EAAIoB,GAAazB,MAAK,SAAC0B,GAC/Bd,EAASD,EAAMW,KAAI,SAAC/B,GAAD,OAAWA,EAAKc,KAAOA,EAAKd,EAAOmC,SACrDC,OAAM,SAAAC,GACPX,EAAgB,QAAD,OACL1B,EAAKK,QADA,qCAGfiC,YAAW,WACTZ,EAAgB,QACf,KACHL,EAASD,EAAMU,QAAO,SAAAS,GAAC,OAAIA,EAAEzB,KAAOA,SAeN0B,CAAmBxC,EAAKc,WAItD,0BAAM2B,SAhDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB9B,GAAIM,EAAMyB,OAAS,EACnBxC,QAASiB,EACTwB,MAAM,IAAIC,MAAOC,cACjB7C,UAAW8C,KAAKC,SAAW,IAG7BtB,EAAmBgB,GAAYnC,MAAK,SAACT,GACnCqB,EAASD,EAAM+B,OAAOnD,IACtBuB,EAAW,SAsCT,2BAAO6B,MAAO9B,EAAS+B,SArDJ,SAACX,GACxBnB,EAAWmB,EAAMY,OAAOF,UAqDpB,4BAAQG,KAAK,UAAb,W,MCpERC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.50059056.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n\r\nexport default { getAll, create, update }\r\n\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message == null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport Notification from \"./components/Notification\"\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const hook = () => {\n    noteService.getAll().then((notes) => {\n      setNotes(notes);\n    });\n  };\n\n  useEffect(hook, []);\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      id: notes.length + 1,\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService.create(noteObject).then((note) => {\n      setNotes(notes.concat(note));\n      setNewNote(\"\");\n    });\n  };\n\n  const toggleImportanceId = (id) => {\n    const note = notes.find((note) => note.id == id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote).then((returnedNote) => {\n      setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n    }).catch(error => {\n      setErrorMessage(\n        `Note ${note.content} was already removed from server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    });\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceId(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}